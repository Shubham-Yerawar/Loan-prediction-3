print(hello);
"hello"
2+3
[2,3]*[1,2]
[2 3]*[1 2]
data("iris")
data("Basic Reference Book 9 may 2016 new.pdf")
devtools::install_github("kassambara/factoextra")
install.packages("dendextend")
library(factoextra)
head(df, n = 6)
df <- na.omit(iris)
head(df, n = 6)
head(df, n = 10)
head(desc_stats)
library(cluster)
library(dendextend)
# Load the data set
data("iris")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(iris)
# View the firt 6 rows of the data
head(df, n = 10)
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
diana(x, metric = "euclidean", stand = FALSE)
library(cluster)
library(dendextend)
# Load the data set
data("iris")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(iris)
# View the firt 6 rows of the data
head(df, n = 10)
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
# Agglomerative Nesting (Hierarchical Clustering)
agnes(x, metric = "euclidean", stand = FALSE, method = "average")
# DIvisive ANAlysis Clustering
diana(x, metric = "euclidean", stand = FALSE)
library(cluster)
library(dendextend)
# Load the data set
data("iris")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(iris)
# View the firt 6 rows of the data
head(df, n = 10)
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
# Dissimilarity matrix
x <- dist(df, method = "euclidean")
# Agglomerative Nesting (Hierarchical Clustering)
agnes(x, metric = "euclidean", stand = FALSE, method = "average")
# DIvisive ANAlysis Clustering
diana(x, metric = "euclidean", stand = FALSE)
x <- dist(df, method = "euclidean")
# Agglomerative Nesting (Hierarchical Clustering)
res.hc <-agnes(x, metric = "euclidean", stand = FALSE, method = "average")
plot(res.hc, cex = 0.6, hang = -1)
res.hc <-agnes(x, metric = "euclidean", stand = FALSE, method = "average")
plot(res.hc)
# DIvisive ANAlysis Clustering
res1.hc<-diana(x, metric = "euclidean", stand = FALSE)
plot(res1.hc)
library(datasets)
library(datasets)
head(iris)
# k-means
library(datasets)
head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#head(iris)
# k-means
library(datasets)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
# k-means
library(datasets)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
# k-means
library(datasets)
library(ggplot)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#compare between the species
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
# k-means
library(datasets)
library(ggplot2)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#compare between the species
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
plot(irisCluster)
plot(irisCluster$cluster)
x <- y <- c(rep(0,3),rep(1,3),rep(10,20),rep(11,20),rep(100,50),rep(101,50))
m <- cbind(x,y)
plot(m, cex=4, lwd=2)
x <- y <- c(rep(0,3),rep(1,3),rep(10,20),rep(11,20),rep(100,50),rep(101,50))
m <- cbind(x,y)
plot(m, cex=4, lwd=2)
for (i in 1:8) {
clus <- cluster::pam(m, 3)
plot(x, y, xlab='', ylab='', axes=FALSE, xpd=NA,
cex=4, pch=as.character( clus$cluster ))
box()
text(50,50,'pam',cex=2,font=2)
}
?Trig
y <- 1/(atan(x <- 1:1000))
(atan(x <- 1:1000))
(atan(x <- 1:5))
(atan(1/x;x <- 1:5))
(atan(1/x))
(atan(1/x))
x <- 1:10
(atan(1/x))
x <- 1:20
(atan(1/x))
x <- 2==pi
x
x <- 2==pi;x
true_missing <- c(TRUE, NA, TRUE, NA)
print("Applying any and all :")
print("any(true_missing) : ",any(true_missing) )
true_missing <- c(TRUE, NA, TRUE, NA)
false_missing <- c(FALSE,NA,FALSE,NA)
mixed <- c(TRUE,FALSE,NA)
print("Applying any and all :")
print("any(true_missing) : " );any(true_missing)
true_missing <- c(TRUE, NA, TRUE, NA)
false_missing <- c(FALSE,NA,FALSE,NA)
mixed <- c(TRUE,FALSE,NA)
print("Applying any and all :")
print("any(true_missing) : " );any(true_missing)
print("any(false_missing) : " );any(false_missing)
print("any(mixed) : " );any(mixed)
false_missing <- c(FALSE,FALSE)
print("any(false_missing) : " );any(false_missing)
false_missing <- c(FALSE,FALSE,NA)
print("any(false_missing) : " );any(false_missing)
print("all(true_missing) : " );all(true_missing)
print("all(false_missing) : " );all(false_missing)
print("all(mixed) : " );all(mixed)
true_missing <- c(TRUE, NA, TRUE, NA,FALSE)
print("all(true_missing) : " );all(true_missing)
setwd("D:\\CrowdAnalytix\\Contest\\Learning_Contest\\Data Preparation and Exploration\\Contest_Data")
class(2)
class(TRUE)
class(NaN)
class(NA)
class(Inf)
class(3.2)
install.packages("e1071")
plot(iris)
plot(iris$Sepal.Length, iris$Sepal.Width, col-iris$Species)
setwd("H://projects//Analytix Vidhya//loan prediction 3//5 final answers/")
loandata <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
floantest<- read.csv(file="test_file.csv", header=TRUE,as.is=T)
summary(loantrain)
setwd("H://projects//Analytix Vidhya//loan prediction 3//5 final answers/")
loantrain <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
loantest<- read.csv(file="test_file.csv", header=TRUE,as.is=T)
summary(loantrain)
summary(loantest)
setwd("H://projects//Analytix Vidhya//loan prediction 3//5 final answers/")
loantrain <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
loantest<- read.csv(file="test_file.csv", header=TRUE,as.is=T)
summary(loantrain)
summary(loantest)
loantrain[loantrain=="No Info"] <- NA
loantrain[loantrain==""] <- NA
View(loantrain)
loantrain$Dependents[is.expression('3+')] <- sample(3:5, sum(is.expression('3+')), replace = F)
View(loantrain)
loantrain$Dependents[is.expression('3+')] <- sample(3:5, size = sum(is.expression('3+')), replace = F)
View(loantrain)
loantrain$Dependents[is.character("3+")] <- sample(3:5, size = sum(is.character("3+")), replace = F)
View(loantrain)
loantrain$Dependents[is.character('3+')] <- sample(3:5, size = sum(is.character('3+')), replace = F)
View(loantrain)
setwd("H://projects//Analytix Vidhya//loan prediction 3//5 final answers/")
loantrain <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
loantest<- read.csv(file="test_file.csv", header=TRUE,as.is=T)
loantrain[loantrain=="No Info"] <- NA
loantrain[loantrain==""] <- NA
for(i in 1:614 ){
if(loantrain$Dependents[i]=="3+"){
loantrain$Dependents[i] <- sample(3:5,replace = FALSE)
}
}
for(i in 1:614 ){
if(loantrain$Dependents[i]=="3+"){
loantrain$Dependents[i] <- sample(c("3","4","5"),replace = FALSE)
}
}
View(loantrain)
for(i in 1:614 ){
if(loantrain$Dependents[i]=="3+" && loantrain$Dependents[i]!=NA){
loantrain$Dependents[i] <- sample(c("3","4","5"),replace = FALSE)
}
}
for(i in 1:614 ){
if(loantrain$Dependents[i]!=NA){
if(loantrain$Dependents[i]=="3+"){
loantrain$Dependents[i] <- sample(c("3","4","5"),replace = FALSE)
}
}
}
for(i in 1:614 ){
if(!is.na(loantrain$Dependents[i])){
if(loantrain$Dependents[i]=="3+"){
loantrain$Dependents[i] <- sample(c("3","4","5"),replace = FALSE)
}
}
}
View(loantrain)
View(loantrain)
col_numeric <- c(4,7:11)
for(i in col_numeric){
loantrain[,i] <- as.numeric(loantrain[,i])
}
col_factor <- c(2,3,5,6,12,13)
for(i in col_factor){
loantrain[,i] <- as.factor(loantrain[,i])
}
summary(loantrain)
View(loantest)
loantest[loantest=="No Info"] <- NA
loantest[loantest==""] <- NA
#replacing 3+ with (3,4,5) randomly
for(i in 1:367 ){
if(!is.na(loantest$Dependents[i])){
if(loantest$Dependents[i]=="3+"){
loantest$Dependents[i] <- sample(c("3","4","5"),replace = FALSE)
}
}
}
col_numeric <- c(4,7:11)
for(i in col_numeric){
loantest[,i] <- as.numeric(loantest[,i])
}
col_factor <- c(2,3,5,6,12)
for(i in col_factor){
loantest[,i] <- as.factor(loantest[,i])
}
summary(loantest)
summary(loantrain)
library(mice)
my_col1 <- c(2,3,4,6,9:11)
new_loantrain <- loantrain[my_col1]
colnames(new_loantrain)
summary(new_loantrain)
imputed_Data1 <- mice(new_loantrain, m=5, defaultMethod = c("pmm","logreg", "polyreg", "polr"), maxit = 50, seed = 777)
completeData1 <- complete(imputed_Data1,5)
View(completeData1)
summary(completeData1)
loantrain$Gender <- completeData1$Gender
loantrain$Married <- completeData1$Married
loantrain$Self_Employed <- completeData1$Self_Employed
loantrain$Dependents <- completeData1$Dependents
loantrain$LoanAmount <- completeData1$LoanAmount
loantrain$Loan_Amount_Term <- completeData1$Loan_Amount_Term
loantrain$Credit_History <- completeData1$Credit_History
summary(floantest)
summary(loantrain)
View(loantest)
summary(loantest)
my_col2 <- c(2,4,6,9:11)
new_loantest <- loantest[my_col2]
colnames(new_loantest)
summary(new_loantest)
imputed_Data2 <- mice(new_loantest, m=5, defaultMethod = c("pmm","logreg", "polyreg", "polr"), maxit = 50, seed = 777)
completeData2 <- complete(imputed_Data2,5)
summary(completeData2)
loantest$Gender <- completeData2$Gender
#loantrain$Married <- completeData1$Married
loantest$Self_Employed <- completeData2$Self_Employed
loantest$Dependents <- completeData2$Dependents
loantest$LoanAmount <- completeData2$LoanAmount
loantest$Loan_Amount_Term <- completeData2$Loan_Amount_Term
loantest$Credit_History <- completeData2$Credit_History
summary(loantest)
library(Boruta)
set.seed(777)
boruta.train <- Boruta(Loan_Status ~ . - Loan_ID, data= loantrain ,pValue =0.01, doTrace=2)
print(boruta.train)
final.boruta <- TentativeRoughFix(boruta.train)
print(final.boruta)
selected_attrib <- data.frame(getSelectedAttributes(final.boruta, withTentative = F))
selected_attrib
final_loan_train <- loantrain[selected_attrib]
imp_col <- c()
View(loantrain)
final_loan_train <- loantrain[c(1,5,7:11)]
final_loan_train <- loantrain[c(1,5,7:11,13)]
final_loan_test <- loantest[c(1,5,7:11)]
library(e1071)
tuned_parameters <- tune.svm(Loan_Status~., data = final_loan_train, gamma = 10^(-5:-1), cost = 10^(-3:1))
summary(tuned_parameters )
tuned_parameters <- tune.svm(Loan_Status~., data = final_loan_train, gamma = 10^(-5:-1), cost = 10^(-3:1))
tuned_parameters <- tune.svm(Loan_Status~.-Loan_ID, data = final_loan_train, gamma = 10^(-5:-1), cost = 10^(-3:1))
summary(tuned_parameters )
model_svm <- svm(Loan_Status ~.-Loan_ID, data = final_loan_train,  kernel = "linear", gamma = 0.01, cost = 1)
model_svm
my_prediction <- predict(model_svm, final_loan_test)
my_prediction
submit <- data.frame(my_prediction)
submit
write.csv(submit,"submission-file.csv",row.names=F)
write.csv(submit,"submission-file-temp.csv",row.names=F)
library(e1071)
tuned_parameters <- tune.svm(Loan_Status~.-Loan_ID, data = loantrain, gamma = 10^(-5:-1), cost = 10^(-3:1))
summary(tuned_parameters )
model_svm <- svm(Loan_Status ~.-Loan_ID, data = final_loan_train,  kernel = "linear", gamma = 0.01, cost = 1)
model_svm
my_prediction <- predict(model_svm, loantest)
my_prediction
submit <- data.frame(my_prediction)
submit
write.csv(submit,"submission-file-temp2.csv",row.names=F)
model_svm <- svm(Loan_Status ~.-Loan_ID, data = final_loan_train,  kernel = "radial", gamma = 0.01, cost = 1)
model_svm
my_prediction <- predict(model_svm, loantest)
my_prediction
submit <- data.frame(my_prediction)
submit
write.csv(submit,"submission-file-temp2.csv",row.names=F)
plot(model_svm, Loan_Status, .-Loan_ID)
plot(model_svm, Loan_Status ~ .-Loan_ID)
plot(model_svm)
model_svm <- svm(Loan_Status ~.-Loan_ID, data = loantrain,  kernel = "radial", gamma = 0.01, cost = 1)
model_svm
my_prediction <- predict(model_svm, loantest)
my_prediction
submit <- data.frame(my_prediction)
submit
#plot(model_svm, data = )
write.csv(submit,"submission-file-temp3.csv",row.names=F)
write.csv(loantrain,"exp1.csv",row.names=F)
new_data <- read.csv(file="exp1.csv", header=TRUE,as.is=T)
new_data<- new_data[c(2:13)]
View(new_data)
model_svm <- svm(Loan_Status ~., data = new_data,  kernel = "linear", gamma = 0.01, cost = 1)
model_svm
my_prediction <- predict(model_svm, loantest)
my_prediction
submit <- data.frame(my_prediction)
submit
#plot(model_svm, data = )
write.csv(submit,"submission-file-temp-exp1.csv",row.names=F)
model <- glm(Loan_Status ~ .-Loan_ID, family = binomial(link = 'logit'), data = final_loan_train)
summary(model)
anova(model, test = 'Chisq')
fitted.results <- predict(model,newdata=final_loan_test,type='response')
newTest <- final_loan_test[c(2:7)]
View(newTest)
fitted.results <- predict(model,newdata=newTest,type='response')
newTest <- final_loan_test[c(1:7)]
fitted.results <- predict(model,newdata=newTest,type='response')
model <- glm(Loan_Status ~ ., family = binomial(link = 'logit'), data = final_loan_train)
fitted.results <- predict(model,newdata=newTest,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
