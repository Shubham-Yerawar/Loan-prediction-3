print(hello);
"hello"
2+3
[2,3]*[1,2]
[2 3]*[1 2]
data("iris")
data("Basic Reference Book 9 may 2016 new.pdf")
devtools::install_github("kassambara/factoextra")
install.packages("dendextend")
library(factoextra)
head(df, n = 6)
df <- na.omit(iris)
head(df, n = 6)
head(df, n = 10)
head(desc_stats)
library(cluster)
library(dendextend)
# Load the data set
data("iris")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(iris)
# View the firt 6 rows of the data
head(df, n = 10)
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
diana(x, metric = "euclidean", stand = FALSE)
library(cluster)
library(dendextend)
# Load the data set
data("iris")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(iris)
# View the firt 6 rows of the data
head(df, n = 10)
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
# Agglomerative Nesting (Hierarchical Clustering)
agnes(x, metric = "euclidean", stand = FALSE, method = "average")
# DIvisive ANAlysis Clustering
diana(x, metric = "euclidean", stand = FALSE)
library(cluster)
library(dendextend)
# Load the data set
data("iris")
# Remove any missing value (i.e, NA values for not available)
# That might be present in the data
df <- na.omit(iris)
# View the firt 6 rows of the data
head(df, n = 10)
desc_stats <- data.frame(
Min = apply(df, 2, min), # minimum
Med = apply(df, 2, median), # median
Mean = apply(df, 2, mean), # mean
SD = apply(df, 2, sd), # Standard deviation
Max = apply(df, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(df)
head(df)
# Dissimilarity matrix
x <- dist(df, method = "euclidean")
# Agglomerative Nesting (Hierarchical Clustering)
agnes(x, metric = "euclidean", stand = FALSE, method = "average")
# DIvisive ANAlysis Clustering
diana(x, metric = "euclidean", stand = FALSE)
x <- dist(df, method = "euclidean")
# Agglomerative Nesting (Hierarchical Clustering)
res.hc <-agnes(x, metric = "euclidean", stand = FALSE, method = "average")
plot(res.hc, cex = 0.6, hang = -1)
res.hc <-agnes(x, metric = "euclidean", stand = FALSE, method = "average")
plot(res.hc)
# DIvisive ANAlysis Clustering
res1.hc<-diana(x, metric = "euclidean", stand = FALSE)
plot(res1.hc)
library(datasets)
library(datasets)
head(iris)
# k-means
library(datasets)
head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#head(iris)
# k-means
library(datasets)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
# k-means
library(datasets)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
# k-means
library(datasets)
library(ggplot)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#compare between the species
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
# k-means
library(datasets)
library(ggplot2)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#compare between the species
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
plot(irisCluster)
plot(irisCluster$cluster)
x <- y <- c(rep(0,3),rep(1,3),rep(10,20),rep(11,20),rep(100,50),rep(101,50))
m <- cbind(x,y)
plot(m, cex=4, lwd=2)
x <- y <- c(rep(0,3),rep(1,3),rep(10,20),rep(11,20),rep(100,50),rep(101,50))
m <- cbind(x,y)
plot(m, cex=4, lwd=2)
for (i in 1:8) {
clus <- cluster::pam(m, 3)
plot(x, y, xlab='', ylab='', axes=FALSE, xpd=NA,
cex=4, pch=as.character( clus$cluster ))
box()
text(50,50,'pam',cex=2,font=2)
}
?Trig
y <- 1/(atan(x <- 1:1000))
(atan(x <- 1:1000))
(atan(x <- 1:5))
(atan(1/x;x <- 1:5))
(atan(1/x))
(atan(1/x))
x <- 1:10
(atan(1/x))
x <- 1:20
(atan(1/x))
x <- 2==pi
x
x <- 2==pi;x
true_missing <- c(TRUE, NA, TRUE, NA)
print("Applying any and all :")
print("any(true_missing) : ",any(true_missing) )
true_missing <- c(TRUE, NA, TRUE, NA)
false_missing <- c(FALSE,NA,FALSE,NA)
mixed <- c(TRUE,FALSE,NA)
print("Applying any and all :")
print("any(true_missing) : " );any(true_missing)
true_missing <- c(TRUE, NA, TRUE, NA)
false_missing <- c(FALSE,NA,FALSE,NA)
mixed <- c(TRUE,FALSE,NA)
print("Applying any and all :")
print("any(true_missing) : " );any(true_missing)
print("any(false_missing) : " );any(false_missing)
print("any(mixed) : " );any(mixed)
false_missing <- c(FALSE,FALSE)
print("any(false_missing) : " );any(false_missing)
false_missing <- c(FALSE,FALSE,NA)
print("any(false_missing) : " );any(false_missing)
print("all(true_missing) : " );all(true_missing)
print("all(false_missing) : " );all(false_missing)
print("all(mixed) : " );all(mixed)
true_missing <- c(TRUE, NA, TRUE, NA,FALSE)
print("all(true_missing) : " );all(true_missing)
setwd("D:\\CrowdAnalytix\\Contest\\Learning_Contest\\Data Preparation and Exploration\\Contest_Data")
class(2)
class(TRUE)
class(NaN)
class(NA)
class(Inf)
class(3.2)
install.packages("e1071")
plot(iris)
plot(iris$Sepal.Length, iris$Sepal.Width, col-iris$Species)
library(Boruta)
setwd("H://projects//CAX startup//my experiments//boruta")
startup<- read.csv(file="filtered_data_exp3.csv", header=TRUE,as.is=T)
set.seed(123)
View(startup)
setwd("H://projects//CAX startup//my experiments//boruta")
startup<- read.csv(file="new.df2.csv", header=TRUE,as.is=T)
View(startup)
col1<- c(5:8)
# using for loop to convert column as numeric
for(i in col1)
{
startup[,i]<-as.numeric(startup[,i])
}
col2<- c(3,4,9:23)
# using for loop to convert column as numeric
for(i in col2)
{
startup[,i]<-as.factor(startup[,i])
}
set.seed(123)
boruta.train <- Boruta(Dependent.Company.Status ~ . -[X, Company_Name], data= startup, doTrace=2)
boruta.train <- Boruta(Dependent.Company.Status ~ . -c(X, Company_Name), data= startup, doTrace=2)
summary(startup)
library(Boruta)
setwd("H://projects//CAX startup//my experiments//boruta")
startup<- read.csv(file="filtered_data_exp4.csv", header=TRUE,as.is=T)
summary(startup)
View(startup)
col1<- c(4:7)
# using for loop to convert column as numeric
for(i in col1)
{
startup[,i]<-as.numeric(startup[,i])
}
col2<- c(2,3,8:22)
# using for loop to convert column as numeric
for(i in col2)
{
startup[,i]<-as.factor(startup[,i])
}
set.seed(777)
boruta.train <- Boruta(Dependent.Company.Status ~ . -c(X, Company_Name), data= startup, doTrace=2)
boruta.train <- Boruta(Dependent.Company.Status ~ . -Company_Name, data= startup, doTrace=2)
summary(startup)
startup <- startup - startup$Focus.functions.of.company
startup <- startup - startup[startup$Focus.functions.of.company]
my_col <- c(1:2,4:22)
new_startup <- startup[my_col]
set.seed(777)
boruta.train <- Boruta(Dependent.Company.Status ~ . - Company_Name, data= new_startup, doTrace=2)
print(boruta.train)
final.boruta <- TentativeRoughFix(boruta.train)
print(final.boruta)
getSelectedAttributes(final.boruta, withTentative = F)
boruta.df <- attStats(final.boruta)
class(boruta.df)
print(boruta.df)
write.csv(boruta.df,"select_boruta.csv",row.names=F)
setwd("H://projects//loan prediction 3//data cleaning")
loandata <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
View(loandata)
summary(loandata)
col_numeric <- c(9:11)
for(i in col_numeric){
loandata[,i] <- as.numeric(loandata[,i])
}
setwd("H://projects//loan prediction 3//data cleaning")
loandata <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
summary(loandata)
View(loandata)
col_numeric <- c(4,7:11)
for(i in col_numeric){
loandata[,i] <- as.numeric(loandata[,i])
}
col_factor <- c(2,3,5,6,12,13)
for(i in col_factor){
loandata[,i] <- as.factor(loandata[,i])
}
library(mice)
my_col1 <- c(9:11)
new_loandata <- loandata[my_col1]
colnames(new_loandata)
summary(new_loandata)
imputed_Data1 <- mice(new_loandata, m=5, method="pmm", maxit = 50, seed = 777)
completeData1 <- complete(imputed_Data1,5)
write.csv(completeData1,"filtered_data.csv",row.names=F)
summary(completeData1)
setwd("H:/projects//loan prediction 3//dimension reduction")
loandata<- read.csv(file="cleaned_data.csv", header=TRUE,as.is=T)
View(loandata)
summary(loandata)
for(i in col_factor){
loandata[,i] <- as.factor(loandata[,i])
}
setwd("H://projects//loan prediction 3//data cleaning")
loandata <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
summary(loandata)
col_numeric <- c(4,7:11)
for(i in col_numeric){
loandata[,i] <- as.numeric(loandata[,i])
}
col_factor <- c(2,3,5,6,12,13)
for(i in col_factor){
loandata[,i] <- as.factor(loandata[,i])
}
library(mice)
my_col1 <- c(4,9:11)
new_loandata <- loandata[my_col1]
colnames(new_loandata)
summary(new_loandata)
imputed_Data1 <- mice(new_loandata, m=5, method="pmm", maxit = 50, seed = 777)
completeData1 <- complete(imputed_Data1,5)
write.csv(completeData1,"filtered_data.csv",row.names=F)
summary(completeData1)
setwd("H:/projects//loan prediction 3//dimension reduction")
loandata<- read.csv(file="cleaned_data.csv", header=TRUE,as.is=T)
summary(loandata)
col_numeric <- c(4,7:11)
for(i in col_numeric){
loandata[,i] <- as.numeric(loandata[,i])
}
col_factor <- c(2,3,5,6,12,13)
for(i in col_factor){
loandata[,i] <- as.factor(loandata[,i])
}
summary(loandata)
library(Boruta)
set.seed(777)
boruta.train <- Boruta(Loan_Status ~ . - Loan_ID, data= loandata ,pValue ==0.01, doTrace=2)
print(boruta.train)
boruta.train <- Boruta(Loan_Status ~ . - Loan_ID, data= loandata ,pValue =0.01, doTrace=2)
print(boruta.train)
boruta.train <- Boruta(Loan_Status ~ . - Loan_ID, data= loandata ,pValue =0.05, doTrace=2)
print(boruta.train)
final.boruta <- TentativeRoughFix(boruta.train)
print(final.boruta)
getSelectedAttributes(final.boruta, withTentative = F)
boruta.df <- attStats(final.boruta)
class(boruta.df)
print(boruta.df)
write.csv(boruta.df,"select_boruta.csv",row.names=F)
