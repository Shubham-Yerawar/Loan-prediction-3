set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#head(iris)
# k-means
library(datasets)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
# k-means
library(datasets)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
# k-means
library(datasets)
library(ggplot)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#compare between the species
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
# k-means
library(datasets)
library(ggplot2)
#head(iris)
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
#compare between the species
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
plot(irisCluster)
plot(irisCluster$cluster)
x <- y <- c(rep(0,3),rep(1,3),rep(10,20),rep(11,20),rep(100,50),rep(101,50))
m <- cbind(x,y)
plot(m, cex=4, lwd=2)
x <- y <- c(rep(0,3),rep(1,3),rep(10,20),rep(11,20),rep(100,50),rep(101,50))
m <- cbind(x,y)
plot(m, cex=4, lwd=2)
for (i in 1:8) {
clus <- cluster::pam(m, 3)
plot(x, y, xlab='', ylab='', axes=FALSE, xpd=NA,
cex=4, pch=as.character( clus$cluster ))
box()
text(50,50,'pam',cex=2,font=2)
}
?Trig
y <- 1/(atan(x <- 1:1000))
(atan(x <- 1:1000))
(atan(x <- 1:5))
(atan(1/x;x <- 1:5))
(atan(1/x))
(atan(1/x))
x <- 1:10
(atan(1/x))
x <- 1:20
(atan(1/x))
x <- 2==pi
x
x <- 2==pi;x
true_missing <- c(TRUE, NA, TRUE, NA)
print("Applying any and all :")
print("any(true_missing) : ",any(true_missing) )
true_missing <- c(TRUE, NA, TRUE, NA)
false_missing <- c(FALSE,NA,FALSE,NA)
mixed <- c(TRUE,FALSE,NA)
print("Applying any and all :")
print("any(true_missing) : " );any(true_missing)
true_missing <- c(TRUE, NA, TRUE, NA)
false_missing <- c(FALSE,NA,FALSE,NA)
mixed <- c(TRUE,FALSE,NA)
print("Applying any and all :")
print("any(true_missing) : " );any(true_missing)
print("any(false_missing) : " );any(false_missing)
print("any(mixed) : " );any(mixed)
false_missing <- c(FALSE,FALSE)
print("any(false_missing) : " );any(false_missing)
false_missing <- c(FALSE,FALSE,NA)
print("any(false_missing) : " );any(false_missing)
print("all(true_missing) : " );all(true_missing)
print("all(false_missing) : " );all(false_missing)
print("all(mixed) : " );all(mixed)
true_missing <- c(TRUE, NA, TRUE, NA,FALSE)
print("all(true_missing) : " );all(true_missing)
setwd("D:\\CrowdAnalytix\\Contest\\Learning_Contest\\Data Preparation and Exploration\\Contest_Data")
class(2)
class(TRUE)
class(NaN)
class(NA)
class(Inf)
class(3.2)
install.packages("e1071")
plot(iris)
plot(iris$Sepal.Length, iris$Sepal.Width, col-iris$Species)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("shinybootstrap2")
library(wSVM)
svm.data <- simul.wsvm(set.seeds = 123)
svm.data <- simul.wsvm(set.seeds = 123)
X <- svm.data$X
View(X)
Y <- svm.data$Y
new.X <- svm.data$new.X
View(new.X)
new.Y <- svm.data$new.Y
View(new.Y)
# run Weighted K-means clustering SVM with boosting algorithm
model <- wsvm(X, Y, c.n = rep(1/ length(Y),length(Y)))
rep(1/ length(Y),length(Y))
1/200
pred <- wsvm.predict(X,Y, new.X, new.Y, model)
Error.rate(pred$predicted.Y, Y)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type = "rbf", par= 0.5), C = 4,
eps = 1e-10, plotting = TRUE)
boo
# final submission
setwd("H://projects//Analytix Vidhya//loan prediction 3//5 final answers/")
loantrain <- read.csv(file="train_file.csv", header=TRUE,as.is=T)
loantest<- read.csv(file="test_file.csv", header=TRUE,as.is=T)
summary(loantrain)
summary(loantest)
loantrain[loantrain=="No Info"] <- NA
loantrain[loantrain==""] <- NA
#replacing 3+ with (3,4,5) randomly
for(i in 1:614 ){
if(!is.na(loantrain$Dependents[i])){
if(loantrain$Dependents[i]=="3+"){
loantrain$Dependents[i] <- sample(c("3","4","5"),replace = FALSE)
}
}
}
col_numeric <- c(4,7:11)
for(i in col_numeric){
loantrain[,i] <- as.numeric(loantrain[,i])
}
col_factor <- c(2,3,5,6,12,13)
for(i in col_factor){
loantrain[,i] <- as.factor(loantrain[,i])
}
summary(loantrain)
setwd("H://projects//Analytix Vidhya//loan prediction 3//4 model fitting/")
loantrain <- read.csv(file="train_set.csv", header=TRUE,as.is=T)
loantest <- read.csv(file="test_set.csv", header=TRUE,as.is=T)
summary(loantrain)
summary(loantest)
col_numeric <- c(2:6)
for(i in col_numeric){
loantrain[,i] <- as.numeric(loantrain[,i])
loantest[,i] <- as.numeric(loantest[,i])
}
col_factor <- c(7,8)
for(i in col_factor){
loantrain[,i] <- as.factor(loantrain[,i])
loantest[,i] <- as.factor(loantest[,i])
}
summary(loantest)
summary(loantrain)
library(e1071)
tuned_parameters <- tune.svm(Loan_Status~.-Loan_ID, data = loantrain, gamma = 10^(-5:-1), cost = 10^(-3:1))
summary(tuned_parameters)
model <- tuned_parameters$best.model
my_prediction <- predict(model, loantest)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
library(wSVM)
View(loantrain)
X <- loantrain[c(2:7)]
Y <- loantrain$Loan_Status
View(loantest)
new.X <- loantest[c(2:7)]
new.Y <- loantest$Loan_Status
Y <- as.matrix(loantrain$Loan_Status)
new.Y <- as.matrix(loantest$Loan_Status)
model <- wsvm(X, Y, c.n = rep(1/ length(Y),length(Y)))
rep(1/ length(Y),length(Y))
Y* c.n
View(loantest)
X <- loantrain[c(2:6)]             # 7 is omitted for now but shud b considered
Y <- as.matrix(loantrain$Loan_Status)
new.X <- loantest[c(2:7)]
new.Y <- as.matrix(loantest$Loan_Status)
model <- wsvm(X, Y, c.n = rep(1/ length(Y),length(Y)))
X <- loantrain[c(2:4)]             # 7 is omitted for now but shud b considered
Y <- as.matrix(loantrain$Loan_Status)
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("Y","N"), labels = c("1","0"))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("Y","N"), labels = c("1","0"))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status <- loantrain$Loan_Status -1
loantrain$Loan_Status
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("Y","N"), labels = c("1","0"))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status <- loantrain$Loan_Status -1
loantrain$Loan_Status
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("Y","N"), labels = c("1","0"))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
#loantrain$Loan_Status <- loantrain$Loan_Status -1
loantrain$Loan_Status
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("Y","N"), labels = c("1","0"))
loantrain$Loan_Status
setwd("H://projects//Analytix Vidhya//loan prediction 3//4 model fitting/")
loantrain <- read.csv(file="train_set.csv", header=TRUE,as.is=T)
loantest <- read.csv(file="test_set.csv", header=TRUE,as.is=T)
col_numeric <- c(2:6)
for(i in col_numeric){
loantrain[,i] <- as.numeric(loantrain[,i])
loantest[,i] <- as.numeric(loantest[,i])
}
col_factor <- c(7,8)
for(i in col_factor){
loantrain[,i] <- as.factor(loantrain[,i])
loantest[,i] <- as.factor(loantest[,i])
}
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("Y","N"), labels = c("1","0"))
loantrain$Loan_Status
loantest$Loan_Status <- factor(loantest$Loan_Status , levels = c("Y","N"), labels = c("1","0"))
loantest$Loan_Status
library(wSVM)
X <- loantrain[c(2:6)]             # 7 is omitted for now but shud b considered
Y <- as.matrix(loantrain$Loan_Status)
model <- wsvm(X, Y, c.n = rep(1/ length(Y),length(Y)))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("N","Y"), labels = c("0","1"))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status
setwd("H://projects//Analytix Vidhya//loan prediction 3//4 model fitting/")
loantrain <- read.csv(file="train_set.csv", header=TRUE,as.is=T)
loantest <- read.csv(file="test_set.csv", header=TRUE,as.is=T)
#summary(loantrain)
#summary(loantest)
col_numeric <- c(2:6)
for(i in col_numeric){
loantrain[,i] <- as.numeric(loantrain[,i])
loantest[,i] <- as.numeric(loantest[,i])
}
col_factor <- c(7,8)
for(i in col_factor){
loantrain[,i] <- as.factor(loantrain[,i])
loantest[,i] <- as.factor(loantest[,i])
}
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("N","Y"), labels = c("0","1"))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status
setwd("H://projects//Analytix Vidhya//loan prediction 3//4 model fitting/")
loantrain <- read.csv(file="train_set.csv", header=TRUE,as.is=T)
loantest <- read.csv(file="test_set.csv", header=TRUE,as.is=T)
#summary(loantrain)
#summary(loantest)
col_numeric <- c(2:6)
for(i in col_numeric){
loantrain[,i] <- as.numeric(loantrain[,i])
loantest[,i] <- as.numeric(loantest[,i])
}
col_factor <- c(7,8)
for(i in col_factor){
loantrain[,i] <- as.factor(loantrain[,i])
loantest[,i] <- as.factor(loantest[,i])
}
loantrain$Loan_Status
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("N","Y"), labels = c("0","1"))
loantrain$Loan_Status
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status
loantrain$Loan_Status <- loantrain$Loan_Status -1
loantrain$Loan_Status
class(loantrain$Loan_Status)
library(wSVM)
X <- loantrain[c(2:6)]             # 7 is omitted for now but shud b considered
Y <- data.frame(loantrain$Loan_Status)
model <- wsvm(X, Y, c.n = rep(1/ length(Y),length(Y)))
X <- as.matrix(loantrain[c(2:6)])             # 7 is omitted for now but shud b considered
Y <- as.matrix(loantrain$Loan_Status)
model <- wsvm(X, Y, c.n = rep(1/ length(Y),length(Y)))
loantest$Loan_Status <- factor(loantest$Loan_Status , levels = c("N","Y"), labels = c("0","1"))
loantest$Loan_Status
loantest$Loan_Status <- as.factor(loantest$Loan_Status)
loantest$Loan_Status
loantest$Loan_Status <- as.numeric(loantest$Loan_Status)
loantest$Loan_Status
loantest$Loan_Status <- loantest$Loan_Status -1
loantest$Loan_Status
class(loantest$Loan_Status)
new.X <-as.matrix(loantest[c(2:6)])
new.Y <- as.matrix(loantest$Loan_Status)
pred <- wsvm.predict(X,Y, new.X, new.Y, model)
Error.rate(pred$predicted.Y, Y)
misClasificError <- mean(pred != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
misClasificError <- mean(pred$predicted.Y != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type = "rbf", par= 0.5), C = 4,
eps = 1e-10, plotting = TRUE)
boo
pred$error.rate
pred <- wsvm.predict(X,Y, new.X, new.Y, boo)
boo$predicted.model
Error.rate(pred$predicted.Y, Y)
Error.rate(pred$predicted.Y, new.Y)
Error.rate(pred$predicted.Y, new.Y)
tmp_new.Y <- t(new.Y)
Error.rate(pred$predicted.Y, tmp_new.Y)
boo
kadya_op <- as.matrix(boo$predicted.model$predicted.Y)
misClasificError <- mean(kadya_op != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
misClasificError <- mean(kadya_op != tmp_new.Y)
print(paste('Accuracy',1-misClasificError))
misClasificError <- mean(tmp_new.Y != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type = "radial", par= 0.5), C = 4,
eps = 1e-10, plotting = TRUE)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type = "radial", par= 0.5), C = 4,
eps = 1e-10, plotting = TRUE)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type = "rbf", par= 0.9), C = 4,
eps = 1e-10, plotting = TRUE)
boo
kadya_op <- as.matrix(boo$predicted.model$predicted.Y)
####after boosting
#pred <- wsvm.predict(X,Y, new.X, new.Y, boo)
#pred$error.rate
#Error.rate(pred$predicted.Y, Y)
misClasificError <- mean(kadya_op != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type = "rbf", par= 0.1), C = 4,
eps = 1e-10, plotting = TRUE)
boo
kadya_op <- as.matrix(boo$predicted.model$predicted.Y)
####after boosting
#pred <- wsvm.predict(X,Y, new.X, new.Y, boo)
#pred$error.rate
#Error.rate(pred$predicted.Y, Y)
misClasificError <- mean(kadya_op != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = "linear", C = 4,
eps = 1e-10, plotting = TRUE)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel = "linear", C = 4,
eps = 1e-10, plotting = TRUE)
library(e1071)
tuned_parameters <- tune.svm(Loan_Status~.-Loan_ID, data = loantrain, gamma = 10^(-5:-1), cost = 10^(-3:1))
summary(tuned_parameters)
model <- tuned_parameters$best.model
my_prediction <- predict(model, loantest)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction <- ifelse(my_prediction > 0.5,1,0)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction <- ifelse(my_prediction > 0.7,1,0)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction <- ifelse(my_prediction > 0.3,1,0)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction <- ifelse(my_prediction > 0.2,1,0)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction <- ifelse(my_prediction > 0.1,1,0)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction <- ifelse(my_prediction > 0.8,1,0)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction <- ifelse(my_prediction > 0.9,1,0)
my_prediction
misClasificError <- mean(my_prediction != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
my_prediction
my_prediction <- predict(model, loantest)
my_prediction
confusionMatrix(my_prediction, loantest$Loan_Status)
table(my_prediction, loantest$Loan_Status)
my_prediction <- ifelse(my_prediction > 0.9,1,0)
table(my_prediction, loantest$Loan_Status)
table(kadya_op, loantest$Loan_Status)
boo
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = c("rbf", par= 0.5), C = 10,
eps = 1e-10, plotting = T)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type="rbf", par= 0.5), C = 10,
eps = 1e-10, plotting = T)
setwd("H://projects//Analytix Vidhya//loan prediction 3//4 model fitting/")
loantrain <- read.csv(file="train_set.csv", header=TRUE,as.is=T)
loantest <- read.csv(file="test_set.csv", header=TRUE,as.is=T)
#summary(loantrain)
#summary(loantest)
col_numeric <- c(2:6)
for(i in col_numeric){
loantrain[,i] <- as.numeric(loantrain[,i])
loantest[,i] <- as.numeric(loantest[,i])
}
col_factor <- c(7,8)
for(i in col_factor){
loantrain[,i] <- as.factor(loantrain[,i])
loantest[,i] <- as.factor(loantest[,i])
}
loantrain$Loan_Status <- factor(loantrain$Loan_Status, levels = c("N","Y"), labels = c("0","1"))
loantrain$Loan_Status <- as.factor(loantrain$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status <- loantrain$Loan_Status -1
loantrain$Loan_Status
class(loantest$Loan_Status)
class(loantest$Loan_Status)
loantrain$Loan_Status <- as.numeric(loantrain$Loan_Status)
loantrain$Loan_Status <- loantrain$Loan_Status -1
loantrain$Loan_Status
loantrain$Loan_Status <- loantrain$Loan_Status +1
loantrain$Loan_Status
class(loantest$Loan_Status)
loantest$Loan_Status <- factor(loantest$Loan_Status , levels = c("N","Y"), labels = c("0","1"))
loantest$Loan_Status <- as.factor(loantest$Loan_Status)
loantest$Loan_Status <- as.numeric(loantest$Loan_Status)
loantest$Loan_Status <- loantest$Loan_Status -1
loantest$Loan_Status
class(loantest$Loan_Status)
library(wSVM)
X <- as.matrix(loantrain[c(2:6)])             # 7 is omitted for now but shud b considered
Y <- as.matrix(loantrain$Loan_Status)
new.X <-as.matrix(loantest[c(2:6)])
new.Y <- as.matrix(loantest$Loan_Status)
tmp_new.Y <- t(new.Y)
model <- wsvm(X, Y, c.n = rep(1/ length(Y),length(Y)))
pred <- wsvm.predict(X,Y, new.X, new.Y, model)
#pred$error.rate
Error.rate(pred$predicted.Y, tmp_new.Y)
misClasificError <- mean(pred$predicted.Y != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type="rbf", par= 0.5), C = 10,
eps = 1e-10, plotting = T)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type="rbf", par= 0.5), C = 4,
eps = 1e-10, plotting = T)
kadya_op <- as.matrix(boo$predicted.model$predicted.Y)
misClasificError <- mean(kadya_op != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
table(kadya_op, loantest$Loan_Status)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type="rbf", par= 0.5), C = 4,
eps = 1e-15, plotting = T)
kadya_op <- as.matrix(boo$predicted.model$predicted.Y)
####after boosting
#pred <- wsvm.predict(X,Y, new.X, new.Y, boo)
#pred$error.rate
#Error.rate(pred$predicted.Y, Y)
misClasificError <- mean(kadya_op != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
table(kadya_op, loantest$Loan_Status)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 50, kernel.type = list(type="rbf", par= 0.5), C = 4,
eps = 1e-5, plotting = T)
boo
kadya_op <- as.matrix(boo$predicted.model$predicted.Y)
####after boosting
#pred <- wsvm.predict(X,Y, new.X, new.Y, boo)
#pred$error.rate
#Error.rate(pred$predicted.Y, Y)
misClasificError <- mean(kadya_op != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
table(kadya_op, loantest$Loan_Status)
boo <- wsvm.boost(X, Y, new.X, new.Y, c.n = rep(1 / length(Y),length(Y)),
B = 100, kernel.type = list(type="rbf", par= 0.5), C = 4,
eps = 1e-10, plotting = T)
boo
kadya_op <- as.matrix(boo$predicted.model$predicted.Y)
####after boosting
#pred <- wsvm.predict(X,Y, new.X, new.Y, boo)
#pred$error.rate
#Error.rate(pred$predicted.Y, Y)
misClasificError <- mean(kadya_op != loantest$Loan_Status)
print(paste('Accuracy',1-misClasificError))
table(kadya_op, loantest$Loan_Status)
