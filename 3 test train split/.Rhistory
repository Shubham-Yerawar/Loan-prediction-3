getwd()
setwd("H://projects//Analytix Vidhya//loan prediction 3//3 test train split/)
f
)
""
""""
setwd("H://projects//Analytix Vidhya//loan prediction 3//3 test train split/")
library(xgboost)
loandata <- read.csv(file = "reduced_data.csv", header = T, as.is = T)
View(loandata)
loandata <- loandata[,-1]
col_numeric <- c(1:3)
for(i in col_numeric){
loandata[,i] <- as.numeric(loandata[,i])
}
col_factor <- c(4:6)
for(i in col_factor){
loandata[,i] <- as.factor(loandata[,i])
}
col_factor <- c(4:7)
for(i in col_factor){
loandata[,i] <- as.factor(loandata[,i])
}
summary(loandata)
## i% of the sample size
smp_size <- floor(0.7 * nrow(loandata))
## set the seed to make your partition reproductible
set.seed(777)
train_ind <- sample(seq_len(nrow(loandata)), size = smp_size)
train <- loandata[train_ind, ]
test <- loandata[-train_ind, ]
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test[,2:ncol(test)], as.numeric)), label=test$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1,
max_depth = 15,
nround=25
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions
predictions <- ifelse(predictions > 0.5,"Y","N")
predictions
test$Loan_Status
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test[,2:ncol(test)], as.numeric)), label=test$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1,
max_depth = 10,
nround=25
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test[,2:ncol(test)], as.numeric)), label=test$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1,
max_depth = 5,
nround=25
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1,
max_depth = 5,
nround=10
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1,
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
## i% of the sample size
smp_size <- floor(0.5 * nrow(loandata))
## set the seed to make your partition reproductible
set.seed(777)
train_ind <- sample(seq_len(nrow(loandata)), size = smp_size)
train <- loandata[train_ind, ]
test <- loandata[-train_ind, ]
#################### xgboost ##############################
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test[,2:ncol(test)], as.numeric)), label=test$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1,
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
## i% of the sample size
smp_size <- floor(0.3 * nrow(loandata))
## set the seed to make your partition reproductible
set.seed(777)
train_ind <- sample(seq_len(nrow(loandata)), size = smp_size)
train <- loandata[train_ind, ]
test <- loandata[-train_ind, ]
#################### xgboost ##############################
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test[,2:ncol(test)], as.numeric)), label=test$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1,
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test[,2:ncol(test)], as.numeric)), label=test$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.05,
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test$Loan_Status)
print(paste('Accuracy',1-misClasificError))
test1 <- test[1:200,]
test2 <- test[201:nrow(test),]
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test1[,2:ncol(test)], as.numeric)), label=test1$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.05,
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError <- mean(predictions != test1$Loan_Status)
print(paste('Accuracy',1-misClasificError))
dtrain <- xgb.DMatrix(as.matrix(sapply(train[,2:ncol(train)], as.numeric)), label=train$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(test2[,2:ncol(test)], as.numeric)), label=test2$Loan_Status)
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.05,
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError2 <- mean(predictions != test2$Loan_Status)
print(paste('Accuracy',1-misClasificError2))
testdata <- read.csv(file = "test_file.csv", header = T, as.is = T)
View(testdata)
testdata <- read.csv(file = "filtered_data-test-final.csv", header = T, as.is = T)
View(testdata)
testdata <- testdata[,c(7:12)]
col_numeric <- c(1:3)
for(i in col_numeric){
loandata[,i] <- as.numeric(loandata[,i])
testdata[,i] <- as.numeric(testdata[,i])
}
col_factor <- c(4:7)
for(i in col_factor){
loandata[,i] <- as.factor(loandata[,i])
testdata[,i]<- as.factor(testdata[,i])
}
col_numeric <- c(1:3)
for(i in col_numeric){
loandata[,i] <- as.numeric(loandata[,i])
testdata[,i] <- as.numeric(testdata[,i])
}
col_factor <- c(4:6)
for(i in col_factor){
#loandata[,i] <- as.factor(loandata[,i])
testdata[,i]<- as.factor(testdata[,i])
}
summary(testdata)
dtest <- xgb.DMatrix(as.matrix(sapply(testdata[,1:ncol(testdata)], as.numeric)))
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
dtest <- xgb.DMatrix(as.matrix(sapply(test2[,2:ncol(test)], as.numeric)))
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError2 <- mean(predictions != test2$Loan_Status)
print(paste('Accuracy',1-misClasificError2))
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.3, # learning rate
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError2 <- mean(predictions != test2$Loan_Status)
print(paste('Accuracy',1-misClasificError2))
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.7, # learning rate
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError2 <- mean(predictions != test2$Loan_Status)
print(paste('Accuracy',1-misClasificError2))
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.7, # learning rate
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError2 <- mean(predictions != test2$Loan_Status)
print(paste('Accuracy',1-misClasificError2))
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.7, # learning rate
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions <- ifelse(predictions > 0.5,"Y","N")
misClasificError2 <- mean(predictions != test2$Loan_Status)
print(paste('Accuracy',1-misClasificError2))
dtest <- xgb.DMatrix(as.matrix(sapply(testdata[,1:ncol(testdata)], as.numeric)))
xgb <- xgboost(data = dtrain,
label = train$Loan_Status,
eta = 0.1, # learning rate
max_depth = 5,
nround=5
)
predictions <- predict(xgb, dtest)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
predictions
predictions <- ifelse(predictions > 0.5,"Y","N")
write.csv(as.data.frame(predictions), file = "LP3_output_xgboost.csv")
dtrain <- xgb.DMatrix(as.matrix(sapply(loandata[,2:ncol(loandata)], as.numeric)), label=loandata$Loan_Status)
dtest <- xgb.DMatrix(as.matrix(sapply(testdata[,1:ncol(testdata)], as.numeric)))
xgb <- xgboost(data = dtrain,
label = loandata$Loan_Status,
eta = 0.1, # learning rate
max_depth = 15,
nround=25
)
predictions <- predict(xgb, dtest)
summary(predictions)
a_max  <-max(predictions)
a_min <- min(predictions)
predictions <- (predictions - a_min)/(a_max -  a_min)
summary(predictions)
predictions <- predict(xgb, dtest)
predictions
predictions <- ifelse(predictions > 1,"Y","N")
submission <- data.frame()
testdata <- testdata[,c(1,7:12)]
testdata <- read.csv(file = "filtered_data-test-final.csv", header = T, as.is = T)
testdata <- testdata[,c(1,7:12)]
View(testdata)
col_numeric <- c(1:3)+1
for(i in col_numeric){
#loandata[,i] <- as.numeric(loandata[,i])
testdata[,i] <- as.numeric(testdata[,i])
}
col_factor <- c(4:6)+1 # 6 -> 7 for loandata
for(i in col_factor){
#loandata[,i] <- as.factor(loandata[,i])
testdata[,i]<- as.factor(testdata[,i])
}
summary(testdata)
submission[,1] <- testdata$Loan_ID
submission[,1] <- t(testdata$Loan_ID)
t(testdata$Loan_ID)
testdata$Loan_ID
submission[,1] <- data.frame(testdata$Loan_ID)
submission[,1] = data.frame(testdata$Loan_ID)
submission[,1] = testdata[,1]
submission[1:367,1] <- 1
View(submission)
submission <- data.frame()
submission[1:367,1] <- 1
submission[,1] = testdata[,1]
View(submission)
submission <- data.frame()
submission[1:367,c(1,2)] <- 1
submission[1:367,1] <- 1
submission[1:367,2] <- 1
submission[,1] = testdata[,1]
predictions
submission[,2] = predictions
colnames(submission) <- c("Loan_ID","Loan_Status")
write.csv(submission, file = "LP3_output_xgboost.csv")
